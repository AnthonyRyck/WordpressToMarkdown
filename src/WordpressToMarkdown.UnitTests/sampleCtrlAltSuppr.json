[
  {
    "id": 3343,
    "date": "2022-03-14T05:48:29",
    "date_gmt": "2022-03-14T04:48:29",
    "guid": { "rendered": "https:\/\/www.ctrl-alt-suppr.dev\/?p=3343" },
    "modified": "2022-03-14T05:48:31",
    "modified_gmt": "2022-03-14T04:48:31",
    "slug": "decouverte-de-spectre-console",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.ctrl-alt-suppr.dev\/2022\/03\/14\/decouverte-de-spectre-console\/",
    "title": { "rendered": "D\u00e9couverte de Spectre.Console" },
    "content": {
      "rendered": "\n<h2>Qu&rsquo;est-ce que Spectre.Console ?<\/h2>\n\n\n\n<p>C&rsquo;est une librairie qui permet de faire des projets <code>Console<\/code> bien plus&#8230; Bling Bling. <\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/spectreconsole.net\/assets\/images\/example.png\" alt=\"\"\/><figcaption>Image de spectreconsole.net<\/figcaption><\/figure><\/div>\n\n\n\n<figure class=\"wp-block-video aligncenter\"><video controls src=\"https:\/\/spectreconsole.net\/assets\/images\/table.webm\"><\/video><figcaption>Image de spectreconsole.net<\/figcaption><\/figure>\n\n\n\n<p>Le projet est OpenSource sur <a rel=\"noreferrer noopener\" href=\"https:\/\/www.nuget.org\/packages\/Spectre.Console\/0.43.1-preview.0.43\" target=\"_blank\">GitHub : Spectre.Console<\/a> et toute la documentation est sur <a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/\" target=\"_blank\">spectreconsole.net<\/a>. Pour cette d\u00e9couverte, nous allons faire un projet console pour ce blog (ctrl-alt-suppr).<\/p>\n\n\n\n<h2>Cr\u00e9ation du projet<\/h2>\n\n\n\n<p>Il faut cr\u00e9er un projet console ou il faut ajouter 2 librairies : <a rel=\"noreferrer noopener\" href=\"https:\/\/www.nuget.org\/packages\/Spectre.Console\/0.43.1-preview.0.43\" data-type=\"URL\" data-id=\"https:\/\/www.nuget.org\/packages\/Spectre.Console\/0.43.1-preview.0.43\" target=\"_blank\">Spectre.Console<\/a> et <a rel=\"noreferrer noopener\" href=\"https:\/\/www.nuget.org\/packages\/Spectre.Console.ImageSharp\/0.43.1-preview.0.43\" target=\"_blank\">Spectre.Console.ImageSharp<\/a>. La 2eme est une librairie qui \u00e9tend les fonctionnalit\u00e9s de Spectre sur les images, vous verrez, c&rsquo;est bien sympa. Voici les commandes pour cr\u00e9er le projet :<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">dotnet new console -o ConsoleBlingBling\ndotnet add .\\ConsoleBlingBling package Spectre.Console\ndotnet add .\\ConsoleBlingBling package Spectre.Console.ImageSharp<\/pre>\n\n\n\n<h4>Le logo<\/h4>\n\n\n\n<p>Au lancement de l&rsquo;application, j&rsquo;aimerai afficher le \u00ab\u00a0logo\u00a0\u00bb du blog, ou du moins ce qui s&rsquo;en rapproche le plus. J&rsquo;ai fait cette image :<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/raw.githubusercontent.com\/AnthonyRyck\/CodesPourDevTo\/master\/src\/dotNet6\/ConsoleBlingBling\/logo.jpg\" alt=\"\"\/><\/figure><\/div>\n\n\n\n<p>Vous allez me dire : <br><em>\u00ab\u00a0Mais dans une application console, on ne peut pas afficher d&rsquo;image\u00a0\u00bb<\/em><br>Spectre va jouer sur les couleurs de background et faire une sorte de \u00ab\u00a0ACSII art\u00a0\u00bb de l&rsquo;image, et c&rsquo;est avec le package <code>Spectre.Console.ImageSharp<\/code> que nous pourrons faire \u00e7a. <br>Ajoutons le code :<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">using Spectre.Console;\n\n\/\/ Image pour le logo\nvar logo = new CanvasImage(\"logo.jpg\");\nAnsiConsole.Write(logo);\nAnsiConsole.WriteLine(); \/\/ pour faire un espace<\/pre>\n\n\n\n<p>C&rsquo;est <code>AnsiConsole<\/code> qui faut utiliser \u00e0 la place de la <code>class Console<\/code> (<a rel=\"noreferrer noopener\" href=\"https:\/\/docs.microsoft.com\/fr-fr\/dotnet\/api\/system.console?view=net-6.0\" target=\"_blank\">doc Console<\/a>). Comme l&rsquo;image est \u00e0 la racine du projet et copi\u00e9 \u00e0 chaque fois \u00e0 la compilation, il faut juste mettre le nom. Le <code>csproj<\/code> : <\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"xml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;Project Sdk=\"Microsoft.NET.Sdk\">\n  &lt;PropertyGroup>\n    &lt;OutputType>Exe&lt;\/OutputType>\n    &lt;TargetFramework>net6.0&lt;\/TargetFramework>\n    &lt;ImplicitUsings>enable&lt;\/ImplicitUsings>\n    &lt;Nullable>enable&lt;\/Nullable>\n  &lt;\/PropertyGroup>\n\n  &lt;ItemGroup>\n    &lt;None Include=\"logo.jpg\">\n      &lt;CopyToOutputDirectory>Always&lt;\/CopyToOutputDirectory>\n    &lt;\/None>\n  &lt;\/ItemGroup>\n\n  &lt;ItemGroup>\n    &lt;PackageReference Include=\"Spectre.Console\" Version=\"0.43.0\" \/>\n    &lt;PackageReference Include=\"Spectre.Console.ImageSharp\" Version=\"0.43.0\" \/>\n  &lt;\/ItemGroup>\n&lt;\/Project><\/pre>\n\n\n\n<p>Il est possible de compiler l&rsquo;image dans l&rsquo;<code>exe<\/code> en utilisant <code>EmbeddedResource<\/code>, dans le <code>csproj<\/code> : <\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"xml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;Project Sdk=\"Microsoft.NET.Sdk\">\n  &lt;PropertyGroup>\n    &lt;OutputType>Exe&lt;\/OutputType>\n    &lt;TargetFramework>net6.0&lt;\/TargetFramework>\n    &lt;ImplicitUsings>enable&lt;\/ImplicitUsings>\n    &lt;Nullable>enable&lt;\/Nullable>\n  &lt;\/PropertyGroup>\n\n  &lt;ItemGroup>\n    &lt;EmbeddedResource Include=\"logo.jpg\" \/>\n  &lt;\/ItemGroup>\n\n  &lt;ItemGroup>\n    &lt;PackageReference Include=\"Spectre.Console\" Version=\"0.43.0\" \/>\n    &lt;PackageReference Include=\"Spectre.Console.ImageSharp\" Version=\"0.43.0\" \/>\n  &lt;\/ItemGroup>\n&lt;\/Project><\/pre>\n\n\n\n<p>En revanche pour charger l&rsquo;image, il faut utiliser la <code>Reflection<\/code> :<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">using System.Reflection;\n\nStream logoStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"ConsoleBlingBling.logo.jpg\");\nCanvasImage logo = new CanvasImage(logoStream);\nAnsiConsole.Write(logo);<\/pre>\n\n\n\n<p>Dans la m\u00e9thode <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">GetManifestResourceStream()<\/code>, il faut indiquer le <strong>namespace complet<\/strong> (<em>donc attention si l&rsquo;image est dans un r\u00e9pertoire<\/em>) et le nom du fichier.<\/p>\n\n\n\n<h4>Le slogan<\/h4>\n\n\n\n<p>Maintenant je veux ajouter le slogan du blog.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/\/ Slogan\nvar slogan= new FigletText(\"Partager du code\")\n\t\t\t.RightAligned()\n\t\t\t.Color(Color.White);\nAnsiConsole.Write(slogan);<\/pre>\n\n\n\n<p><code>FigleText<\/code> (<a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/widgets\/figlet\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/widgets\/figlet\" target=\"_blank\">doc spectre<\/a>) permet de convertir le string pass\u00e9 en param\u00e8tre en <code>FIGlet<\/code> (<a rel=\"noreferrer noopener\" href=\"https:\/\/fr.wikipedia.org\/wiki\/FIGlet\" data-type=\"URL\" data-id=\"https:\/\/fr.wikipedia.org\/wiki\/FIGlet\" target=\"_blank\">d\u00e9finition<\/a>). <br>Voil\u00e0 ce que \u00e7a donne :<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/raw.githubusercontent.com\/AnthonyRyck\/CodesPourDevTo\/master\/src\/ImgBlog\/Spectre\/01-Spectre_LogoSousTitre.png\" alt=\"\"\/><\/figure><\/div>\n\n\n\n<p>Le fond avec les \u00e9toiles est mon background de mon Windows Terminal. Dans les <a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/best-practices\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/best-practices\" target=\"_blank\">best-practices<\/a> de Spectre, il indique que le rendu peut \u00eatre \u00ab\u00a0g\u00e2ch\u00e9\u00a0\u00bb (<em>c&rsquo;est ma traduction \ud83d\ude42<\/em>) en fonction de comment est configur\u00e9 la sortie de l&rsquo;utilisateur. Si vous mettez une grande image, et que l&rsquo;utilisateur a une fen\u00eatre de console toute petite, \u00e7a va sortir un r\u00e9sultat tr\u00e8s diff\u00e9rent de ce que vous vous attendiez. <br>Maintenant que j&rsquo;ai mis le logo et le slogan, je veux que cette application r\u00e9cup\u00e8re les 10 derniers articles pour les afficher dans un menu.<\/p>\n\n\n\n<h4>R\u00e9cup\u00e9ration des articles<\/h4>\n\n\n\n<p>Pendant que la console r\u00e9cup\u00e8re les articles, je veux qu&rsquo;elle affiche un \u00ab\u00a0waiting\u00a0\u00bb, une animation pour faire patienter l&rsquo;utilisateur. Je vais utiliser <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">AnsiConsole.Status()<\/code> (<a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/live\/status\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/live\/status\" target=\"_blank\">doc spectre<\/a>).<br>Voici le code :<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/\/ Affichage des 10 derniers articles du blog.\nList&lt;PostWordPress> posts = new List&lt;PostWordPress>();\n\nawait AnsiConsole.Status()\n    \t\t.StartAsync(\"R\u00e9cup\u00e9ration des 10 derniers post...\", async ctx => \n    \t\t{\n\t\t\t\t\/\/ Change le \"waiting\".\n\t\t\t\tctx.Spinner(Spinner.Known.Aesthetic);\n\n\t\t\t\tusing(var client = new HttpClient())\n\t\t\t\t{\n\t\t\t\t\tstring url = @\"https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/posts?per_page=10\";\n\t\t\t\t\tvar streamPosts = await client.GetStreamAsync(url);\n\t\t\t\t\tposts = await JsonSerializer.DeserializeAsync&lt;List&lt;PostWordPress>>(streamPosts);\n\t\t\t\t}\n\t\t\t\t\/\/ Pour avoir le temps de voir le \"waiting\".\n\t\t\t\tawait Task.Delay(5000);\n\t\t\t\tAnsiConsole.MarkupLine(\":check_mark: Termin\u00e9 \" + Emoji.Known.CheckMark);\n    \t\t});<\/pre>\n\n\n\n<p>L&rsquo;animation sera affich\u00e9e jusqu&rsquo;\u00e0 la fin du <code>StartAsync()<\/code>. Il est possible de choisir le type d&rsquo;animation, avec l&rsquo;option <a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/appendix\/spinners\" target=\"_blank\">Spinner<\/a> (<code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">ctx.Spinner(Spinner.Known.Aesthetic);<\/code>). Dans mon cas j&rsquo;ai mis : <code>Aesthetic<\/code>, mais vous trouverez tous les <a rel=\"noreferrer noopener\" href=\"https:\/\/jsfiddle.net\/sindresorhus\/2eLtsbey\/embedded\/result\/\" target=\"_blank\">exemples ici<\/a>.<br><strong>Note<\/strong> : J&rsquo;ai mis un <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">await Task.Delay(5000)<\/code>, car \u00e0 l&rsquo;air de la fibre vous ne verrez quasiment pas le \u00ab\u00a0waiting\u00a0\u00bb.<\/p>\n\n\n\n<p>Sur la derni\u00e8re ligne : <br><code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">AnsiConsole.MarkupLine(\":check_mark: Termin\u00e9 \" + Emoji.Known.CheckMark);<\/code> <br>J&rsquo;ai fait expr\u00e8s de mettre les 2 mani\u00e8res de mettre des <a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/appendix\/emojis\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/appendix\/emojis\" target=\"_blank\">Emojis<\/a>, soit c&rsquo;est une chaine de caract\u00e8re (<code>:check_mark:<\/code>) ou de passer par l&rsquo;\u00e9num\u00e9ration <code>Emoji.Know<\/code>.<\/p>\n\n\n\n<h4>Menu pour les articles<\/h4>\n\n\n\n<p>Je vais faire un menu rapide qui donnera le choix \u00e0 l&rsquo;utilisateur entre les 10 articles, de r\u00e9afficher le menu ou de quitter l&rsquo;application.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">string cmdQuit = \"quit\";\nstring selection = string.Empty;\n\nShowPosts();\n\nwhile(selection != cmdQuit)\n{\n\tAnsiConsole.WriteLine();\n\tselection = AnsiConsole.Ask&lt;string>(\"Quel est votre choix ?\");\n\n\tswitch (selection)\n\t{\n\t\tcase \"quit\":\n\t\t\tAnsiConsole.WriteLine();\n\t\t\tAnsiConsole.MarkupLine(\"See you soon \" + Emoji.Known.OkHand);\n\t\t\tAnsiConsole.WriteLine();\n\t\t\tEnvironment.Exit(0);\n\t\t\tbreak;\n\t\tcase \"posts\":\n\t\t\tShowPosts();\n\t\t\tbreak;\n\t\tcase \"1\":\n\t\tcase \"2\":\n\t\tcase \"3\":\n\t\tcase \"4\":\n\t\tcase \"5\":\n\t\tcase \"6\":\n\t\tcase \"7\":\n\t\tcase \"8\":\n\t\tcase \"9\":\n\t\tcase \"10\":\n\t\t\tint index = int.Parse(selection);\n\t\t\tstring urlPost = posts[index - 1].link;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tProcessStartInfo startInfo = new ProcessStartInfo(@\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\");\n            \tstartInfo.WindowStyle = ProcessWindowStyle.Maximized;\n            \tstartInfo.Arguments = urlPost;\n            \tProcess.Start(startInfo);\n\t\t\t\tAnsiConsole.MarkupLine(\"[green]Bonne lecture[\/] :grinning_face_with_big_eyes:\");\n\t\t\t}\n\t\t\tcatch (System.Exception ex)\n\t\t\t{\n\t\t\t\tAnsiConsole.MarkupLine(\"[red]ERREUR [\/] :angry_face:\");\n\t\t\t\tAnsiConsole.MarkupLine(\"Edge n'a pas pu \u00eatre ouvert, du coup voici l'URL de l'article choisi :\");\n\t\t\t\tAnsiConsole.MarkupLine(urlPost);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tAnsiConsole.MarkupLine(\"[red]Euuhhh le choix n'est pas compliqu\u00e9...[\/] :angry_face:\");\n\t\t\tAnsiConsole.MarkupLine(string.Empty);\n\t\t\tbreak;\n\t}\n}\n\nvoid ShowPosts()\n{\n\t\/\/ Affichage des posts.\n\tfor (var i = 0; i &lt; posts.Count; i++)\n\t{\n\t\tAnsiConsole.MarkupLine($\"[purple]{i + 1}[\/] - {posts[i].date.ToString(\"d\")} - {posts[i].title.rendered}\");\n\t}\n\tAnsiConsole.MarkupLine(\"[green]posts[\/] : pour r\u00e9afficher la liste des articles.\");\n\tAnsiConsole.MarkupLine(\"[red]quit[\/] : pour quitter.\");\n}<\/pre>\n\n\n\n<p>Qu&rsquo;est ce qui est important.<\/p>\n\n\n\n<ul><li><code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">selection = AnsiConsole.Ask&lt;string&gt;(\"Quel est votre choix ?\");<\/code><br>Il remplace <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">Console.ReadLine();<\/code> ou <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">Console.ReadKey();<\/code>, et la sortie peut \u00eatre directement typ\u00e9.<\/li><li><code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">AnsiConsole.MarkupLine(\"See you soon \" + Emoji.Known.OkHand);<\/code><br><a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/markup\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/markup\" target=\"_blank\">MarkupLine<\/a> \u00e9quivaut \u00e0 <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">AnsiConsole.Write(new Markup(\".....\"));<\/code> Je vous laisse lire la doc pour lui, car il permet de changer de couleur le texte, souligner, mettre des <a rel=\"noreferrer noopener\" href=\"https:\/\/spectreconsole.net\/appendix\/emojis\" data-type=\"URL\" data-id=\"https:\/\/spectreconsole.net\/appendix\/emojis\" target=\"_blank\">emojis<\/a>,&#8230; enfin c&rsquo;est lui qui rend la vie plus be<\/li><\/ul>\n\n\n\n<p>Pour changer la couleur : <code data-enlighter-language=\"csharp\" class=\"EnlighterJSRAW\">AnsiConsole.MarkupLine(\"[red]quit[\/] : pour quitter.\");<\/code> <br>Spectre va <em>parser<\/em> la chaine de string. Par exemple, pour avoir du rouge il faut \u00e9crire : <code>[red]<\/code> et ne <strong>PAS OUBLIER<\/strong> le <code>[\/]<\/code> pour indiquer la fin, sinon <strong>Exception<\/strong>. Comme c&rsquo;est dans une chaine de string, votre IDE ne va pas vous aider \u00e0 trouver l&rsquo;erreur.<\/p>\n\n\n\n<p><strong>Attention<\/strong><br>Pour la d\u00e9couverte, quand l&rsquo;utilisateur choisira un article \u00e7a lui ouvre l&rsquo;application Edge, donc si vous utilisez un Mac\/Linux \u00e7a ne fonctionnera pas (<em>test\u00e9 sous Win10 et Win11<\/em>).<\/p>\n\n\n\n<h2>Et on peut faire du Scripting ?<\/h2>\n\n\n\n<p>Nous venons de cr\u00e9er un projet console, et si on le scriptait ? Pour voir comment faire\/utiliser un script en C#, aller voir le post : <a rel=\"noreferrer noopener\" href=\"https:\/\/www.ctrl-alt-suppr.dev\/2022\/02\/28\/tips-tricks-du-script-en-c\/\" data-type=\"URL\" data-id=\"https:\/\/www.ctrl-alt-suppr.dev\/2022\/02\/28\/tips-tricks-du-script-en-c\/\" target=\"_blank\">Tips &amp; Tricks \u2013 Du script en C#<\/a>. <br>Dans ce script, je reprends \u00e0 99% le code du projet console. Vous retrouvez le script sur <a rel=\"noreferrer noopener\" href=\"https:\/\/raw.githubusercontent.com\/AnthonyRyck\/CodesPourDevTo\/master\/src\/dotNetScript\/SpectreScript\/main.csx\" data-type=\"URL\" data-id=\"https:\/\/raw.githubusercontent.com\/AnthonyRyck\/CodesPourDevTo\/master\/src\/dotNetScript\/SpectreScript\/main.csx\" target=\"_blank\">GitHub<\/a>, et pour l&rsquo;ex\u00e9cuter en direct voici la commande :<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">dotnet script https:\/\/raw.githubusercontent.com\/AnthonyRyck\/CodesPourDevTo\/master\/src\/dotNetScript\/SpectreScript\/main.csx<\/pre>\n\n\n\n<p>Voil\u00e0, maintenant je suis un adepte de ces librairies, je pense m\u00eame refaire certains de mes projets avec \ud83d\ude09 Il y a encore tellement \u00e0 d\u00e9couvrir (les tableaux, les commandes,&#8230;), mais je vous laisse faire vos propres tests.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Qu&rsquo;est-ce que Spectre.Console ? C&rsquo;est une librairie qui permet de faire des projets Console bien plus&#8230; Bling Bling. Le projet est OpenSource sur GitHub : Spectre.Console et toute la documentation est sur spectreconsole.net. Pour cette d\u00e9couverte, nous allons faire un projet console pour ce blog (ctrl-alt-suppr). Cr\u00e9ation du projet Il faut cr\u00e9er un projet console&hellip;&nbsp;<a href=\"https:\/\/www.ctrl-alt-suppr.dev\/2022\/03\/14\/decouverte-de-spectre-console\/\" class=\"\" rel=\"bookmark\">Lire la suite &raquo;<span class=\"screen-reader-text\">D\u00e9couverte de Spectre.Console<\/span><\/a><\/p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 3358,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": {
      "neve_meta_sidebar": "",
      "neve_meta_container": "",
      "neve_meta_enable_content_width": "",
      "neve_meta_content_width": 0,
      "neve_meta_title_alignment": "",
      "neve_meta_author_avatar": "",
      "neve_post_elements_order": "",
      "neve_meta_disable_header": "",
      "neve_meta_disable_footer": "",
      "neve_meta_disable_title": ""
    },
    "categories": [ 2 ],
    "tags": [ 4 ],
    "_links": {
      "self": [ { "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/posts\/3343" } ],
      "collection": [ { "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/posts" } ],
      "about": [ { "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/types\/post" } ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/users\/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/comments?post=3343"
        }
      ],
      "version-history": [
        {
          "count": 140,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/posts\/3343\/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3485,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/posts\/3343\/revisions\/3485"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/media\/3358"
        }
      ],
      "wp:attachment": [ { "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/media?parent=3343" } ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/categories?post=3343"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.ctrl-alt-suppr.dev\/wp-json\/wp\/v2\/tags?post=3343"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  }
]
